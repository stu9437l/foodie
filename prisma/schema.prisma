// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  role        RoleEnum @default(ADMIN) // Use RoleEnum for role management
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
  profilePic  String?  // Optional: URL or path to the profile picture
  bio         String?  // Optional bio
  phoneNumber String?  // Optional phone number

  @@map("users") // Maps to a specific table name in MySQL
}


model Employee {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  image       String?
  password    String
  role        RoleEnum   @default(USER) // Default role set to USER
  phone       String
  address     String
  empId       Int  @unique
  position    Position   @relation(fields: [positionId], references: [id])
  positionId  Int
  department  Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  employeeFood EmployeeFood[]
  food Food @relation(fields: [foodId], references:[id])
  foodId  Int 

  @@map("employees") // Maps to a specific table name in MySQL
}


model Department {
  id          Int         @id @default(autoincrement())
  name        String
  employees   Employee[]  // A department can have many employees

  @@map("departments") // Maps to a specific table name in MySQL
}

model Position {
  id          Int         @id @default(autoincrement())
  name        String
  employees   Employee[]  // A position can have many employees

  @@map("positions") // Maps to a specific table name in MySQL
}

model EmployeeFood {
  id Int @id @default(autoincrement())
  employee Employee @relation(fields: [employeeId], references:[id])
  employeeId Int 
  food Food @relation(fields: [foodId], references:[id])
  foodId  Int 
  remarks String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("employee_foods")

}


model Food{
  id   Int @id @default(autoincrement())
  name String
  employeeFood EmployeeFood[]
  employee Employee[]

  @@map("food_list")
}

enum RoleEnum {
  ADMIN
  USER
}
